/**
 * Race Data Management
 * Handles loading and organizing race data from races.js
 */

import { state } from '../core/state.js';

/**
 * Distance categories configuration
 */
export const distanceCategories = {
    short: race => parseInt(race.length.replace(/[^\d]/g, '')) <= 1400,
    mile: race => {
        const length = parseInt(race.length.replace(/[^\d]/g, ''));
        return length >= 1401 && length <= 1800;
    },
    medium: race => {
        const length = parseInt(race.length.replace(/[^\d]/g, ''));
        return length >= 1801 && length <= 2400;
    },
    long: race => parseInt(race.length.replace(/[^\d]/g, '')) >= 2401
};

/**
 * Eastern Japan tracks
 */
export const easternTracks = [
    'Tokyo', 'Nakayama (Chiba)', 'Niigata', 'Fukushima', 
    'Kawasaki', 'Ooi', 'Funabashi', 'Morioka'
];

/**
 * Western Japan tracks
 */
export const westernTracks = [
    'Kyoto', 'Hanshin (Takarazuka)', 'Chukyou (Nagoya)', 
    'Kokura (Kitakyushu)', 'Sapporo', 'Hakodate'
];

/**
 * JRA Summer Series groupings
 */
export const summerSeries = {
    sprint: [
        'Hakodate Sprint Stakes',
        'CBC Sho',
        'Ibis Summer Dash',
        'Keeneland Cup',
        'Kitakyushu Kinen',
        'Centaur Stakes'
    ],
    mile: [
        'Epsom Cup',
        'Chukyo Kinen',
        'Sekiya Kinen'
    ],
    s2000: [
        'Hakodate Kinen',
        'Tanabata Sho',
        'Kokura Kinen',
        'Sapporo Kinen',
        'Niigata Kinen'
    ]
};

/**
 * Translation maps for UI
 */
export const translations = {
    tracks: {
        'Tokyo': '東京',
        'Nakayama (Chiba)': '中山',
        'Kyoto': '京都',
        'Hanshin (Takarazuka)': '阪神',
        'Chukyou (Nagoya)': '中京',
        'Kokura (Kitakyushu)': '小倉',
        'Sapporo': '札幌',
        'Hakodate': '函館',
        'Niigata': '新潟',
        'Fukushima': '福島',
        'Kawasaki': '川崎',
        'Ooi': '大井',
        'Funabashi': '船橋',
        'Morioka': '盛岡'
    },
    surfaces: {
        'turf': '芝',
        'dirt': 'ダート'
    },
    months: {
        'January': '1月',
        'February': '2月',
        'March': '3月',
        'April': '4月',
        'May': '5月',
        'June': '6月',
        'July': '7月',
        'August': '8月',
        'September': '9月',
        'October': '10月',
        'November': '11月',
        'December': '12月'
    },
    halves: {
        '1st': '前半',
        '2nd': '後半'
    },
    directions: {
        'right': '右回り',
        'left': '左回り'
    },
    seasons: {
        'spring': '春',
        'summer': '夏',
        'autumn': '秋',
        'winter': '冬'
    },
    types: {
        'Classic': 'クラシック級',
        'Senior': 'シニア級', 
        'Junior': 'ジュニア級'
    }
};

/**
 * Load race data from window.RACES (generated by races.js)
 * @returns {Array} Array of race objects
 */
export function loadRaceData() {
    // Prefer prebuilt dataset if available (generated by generate_races_js.py)
    if (typeof window !== 'undefined' && window.RACES && Array.isArray(window.RACES)) {
        updateDataSourceIndicator();
        return window.RACES;
    }
    
    // No races.js found
    updateDataSourceIndicator(false);
    return [];
}

/**
 * Update the data source indicator in the UI
 * @param {boolean} hasData - Whether race data was loaded
 */
function updateDataSourceIndicator(hasData = true) {
    const ind = document.getElementById('data-source-indicator');
    if (!ind) return;
    
    if (hasData) {
        const meta = (typeof window !== 'undefined' && window.RACES_META) ? window.RACES_META : null;
        const dateText = meta && meta.generatedAt ? new Date(meta.generatedAt).toLocaleString() : 'unknown time';
        const countText = meta && meta.count != null ? ` (${meta.count} races)` : '';
        ind.textContent = `Data source: races.js — generated ${dateText}${countText}`;
    } else {
        ind.textContent = 'No race data loaded. Please ensure races.js is available.';
    }
}

/**
 * Build race lookup maps
 * @param {Array} races - Array of race objects
 * @returns {Object} Object with raceById and raceIdsByName maps
 */
export function buildRaceMaps(races) {
    const raceById = new Map(races.map(r => [String(r.id), r]));
    
    // Build a mapping from English race name -> Set of IDs (handles duplicates across years)
    const raceIdsByName = new Map();
    races.forEach(race => {
        const id = String(race.id);
        const name = race.name || '';
        if (!name) return;
        if (!raceIdsByName.has(name)) raceIdsByName.set(name, new Set());
        raceIdsByName.get(name).add(id);
    });
    
    return { raceById, raceIdsByName };
}

/**
 * Check if a race is Grade 1 (handles both GI and G1 encodings)
 * @param {Object} race - Race object
 * @returns {boolean} True if race is G1
 */
export function isGradeOne(race) {
    if (!race || !race.type) return false;
    const t = race.type.toUpperCase();
    return t === 'GI' || t === 'G1';
}

/**
 * Initialize race data and populate state
 * This is a convenience function that loads races and updates the global state
 */
export function initializeRaceData() {
    // Load races
    state.races = loadRaceData();
    
    // Build lookup maps
    const { raceById, raceIdsByName } = buildRaceMaps(state.races);
    state.raceById = raceById;
    state.raceIdsByName = raceIdsByName;
    
    // Set data structures
    state.distanceCategories = distanceCategories;
    state.easternTracks = easternTracks;
    state.westernTracks = westernTracks;
    state.summerSeries = summerSeries;
    state.translations = translations;
}
